# for the GUI using Tkinter
import tkinter as tk
from tkinter import *  # need this for DoubleVar ???
from tkinter import ttk
from tkinter import messagebox  # for the error message
import numpy as np

LARGE_FONT= ("Verdana", 12)
NORM_FONT = ("Helvetica", 10)
SMALL_FONT = ("Helvetica", 8)


def popupmsg(msg):  # pop up message
    popup = tk.Tk()
    popup.wm_title("!")
    label = ttk.Label(popup, text=msg, font=NORM_FONT)
    label.pack(side="top", fill="x", pady=10)
    B1 = ttk.Button(popup, text="Okay", command = popup.destroy)
    B1.pack()
    popup.mainloop()


class SeaofMPYapp(tk.Tk):
    def __init__(self, *args, **kwargs):  # always runs when the program is running (similar to comp mouse always
        # works when the comp starts
        tk.Tk.__init__(self, *args, **kwargs)  # initialize the inherited class

        # tk.Tk.iconbitmap(self, default='clienticon.ico')  # this can change the icon at the top left
        tk.Tk.wm_title(self, "AutoClave Testing")

        container = tk.Frame(self)
        container.pack(side='top', fill='both', expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}

        for F in (StartPage, welcomePage, data1):  # for changing frames aka pages( go to another page)
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")
        self.show_frame(StartPage)

    def show_frame(self, cont):  # for changing frames
        frame = self.frames[cont]
        frame.tkraise()

    def get_page(self, page_name): # used for getting values from another class
        for page in self.frames.values():
            if str(page.__class__.__name__) == page_name:
                return page
        return None


# THIS is the front end--------------------------------------------
# -----------------------------------------------------------------
class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.label = tk.Label(self, text="ALPHA MPY calculator application. There is no promise of warranty."
                         , font=LARGE_FONT)
        self.label.pack(pady=10, padx=10)

        self.button1 = ttk.Button(self, text="Agree",
                             command=lambda: controller.show_frame(welcomePage))
        self.button1.pack(padx=15, pady=10)

        self.button2 = ttk.Button(self, text="Disagree",
                             command=quit)
        self.button2.pack()


class welcomePage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.label = tk.Label(self, text="Enter Information (Ring Coupons)", font=LARGE_FONT)
        self.label.grid(row=5, column=10, columnspan=45)

        # buttons and entries===============================
        self.name = tk.Label(self, text="Company Name", font=NORM_FONT)
        self.name.grid(row=10, column=5)
        self.name_var = StringVar()
        self.name_ent = tk.Entry(self, textvariable=self.name_var)
        self.name_ent.grid(row=10, column=10)

        self.date = tk.Label(self, text="Date", font=NORM_FONT)
        self.date.grid(row=15, column=5)
        self.date_var = StringVar()
        self.date_ent = tk.Entry(self, textvariable=self.date_var)
        self.date_ent.grid(row=15, column=10)

        self.num_cell = tk.Label(self, text="Number of Cells", font=NORM_FONT)  # This will be set
        self.num_cell.grid(row=20, column=5)
        self.num_cell_var = DoubleVar()
        self.num_cell_ent = tk.Entry(self, textvariable=self.num_cell_var)
        self.num_cell_var.set(3)  # default is 3
        self.num_cell_ent.grid(row=20, column=10)

        self.num_coupon = tk.Label(self, text="Number of Coupon", font=NORM_FONT)  # this will be set
        self.num_coupon.grid(row=25, column=5)
        self.num_coupon_var = DoubleVar()  # see if this works?
        self.num_coupon_ent = tk.Entry(self, textvariable=self.num_coupon_var)
        self.num_coupon_var.set(4)  # 4 is the default # of coupons (convert to from string to int)
        self.num_coupon_ent.grid(row=25, column=10)

        self.duration = tk.Label(self, text="Duration (hours)", font=NORM_FONT)
        self.duration.grid(row=30, column=5)
        self.duration_var = DoubleVar()
        self.duration_ent = tk.Entry(self, textvariable=self.duration_var)
        self.duration_ent.grid(row=30, column=10)

        self.temp = tk.Label(self, text="Temperature (oF)", font=NORM_FONT)
        self.temp.grid(row=35, column=5)
        self.tempF_var = DoubleVar()
        self.temp_ent = tk.Entry(self, textvariable=self.tempF_var)
        self.temp_ent.grid(row=35, column=10)

        self.tempC = tk.Label(self, text="Temperature (oC)", font=NORM_FONT)  # Calculated
        self.tempC.grid(row=40, column=5)
        self.tempC_var = DoubleVar()
        self.tempC_ent = tk.Entry(self, textvariable=self.tempC_var, state='readonly')
        self.tempC_ent.grid(row=40, column=10)

        # end of the first column=============================================

        self.press = tk.Label(self, text="CO2 pressure (psi)", font=NORM_FONT)
        self.press.grid(row=10, column=40)
        self.press_var = DoubleVar()
        self.press_ent = tk.Entry(self, textvariable=self.press_var)
        self.press_ent.grid(row=10, column=45)

        self.press_total = tk.Label(self, text="Total Pressure", font=NORM_FONT)  # this will be set
        self.press_total.grid(row=15, column=40)
        self.press_total_var = DoubleVar()
        self.press_total_ent = tk.Entry(self, textvariable=self.press_total_var, state='readonly')
        self.press_total_ent.grid(row=15, column=45)

        self.rpm = tk.Label(self, text="RPM", font=NORM_FONT)
        self.rpm.grid(row=20, column=40)
        self.rpm_var = DoubleVar()
        self.rpm_ent = tk.Entry(self, textvariable=self.rpm_var)
        self.rpm_ent.grid(row=20, column=45)

        self.vel = tk.Label(self, text="Coupon Velocity (ft/s)", font=NORM_FONT)  # Calculated
        self.vel.grid(row=25, column=40)
        self.vel_var = DoubleVar()
        self.vel_ent = tk.Entry(self, textvariable=self.vel_var, state='readonly')
        self.vel_ent.grid(row=25, column=45)

        self.density = tk.Label(self, text="Density (g/cm^3)", font=NORM_FONT)
        self.density.grid(row=26, column=40)
        self.density_var = DoubleVar()
        self.density_ent = tk.Entry(self, textvariable=self.density_var, state='readonly')
        self.density_var.set(7.87)
        self.density_ent.grid(row=26, column=45)

        self.area = tk.Label(self, text="area (in^2)", font=NORM_FONT)
        self.area.grid(row=27, column=40)
        self.area_var = DoubleVar()
        self.area_ent = tk.Entry(self, textvariable=self.area_var, state='readonly')
        self.area_var.set(7.73)  # square inches
        self.area_ent.grid(row=27, column=45)

        # # next step information
        # self.next_info = tk.Label(self, text="Set values.", font=LARGE_FONT)
        # self.next_info.grid(row=40, column=45)

        # Second part of the page=============================================
        # ====================================================================
        self.blank = tk.Label(self)  # Give a blank space
        self.blank.grid(row=45, column=5)
        self.clean_label = tk.Label(self, text="Water Composition", font=LARGE_FONT)
        self.clean_label.grid(row=50, column=5)

        self.total_Liters = tk.Label(self, text="Liters of Brine")
        self.total_Liters.grid(row=55, column=5)
        self.total_Liters_var = DoubleVar()
        self.t_Liters_ent = tk.Entry(self, textvariable=self.total_Liters_var)
        self.t_Liters_ent.grid(row=55, column=10)

        self.cell_Liter = tk.Label(self, text="mL/Cell")
        self.cell_Liter.grid(row=60, column=5)
        self.cell_Liter_var = DoubleVar()
        self.cell_L_ent = tk.Entry(self, textvariable=self.cell_Liter_var, state='readonly')
        self.cell_L_ent.grid(row=60, column=10)

        self.per_oil = tk.Label(self, text="Percent Oil")
        self.per_oil.grid(row=65, column=5)
        self.per_oil_var = DoubleVar()
        self.per_oil_ent = tk.Entry(self, textvariable=self.per_oil_var)
        self.per_oil_ent.grid(row=65, column=10)

        self.oil_Liters = tk.Label(self, text="Liters of Oil/Cell")
        self.oil_Liters.grid(row=70, column=5)
        self.oil_L_var = DoubleVar()  # dependant on % oil
        self.oil_L_ent = tk.Entry(self, textvariable=self.oil_L_var, state='readonly')
        self.oil_L_ent.grid(row=70, column=10)

        # products and PPM======================================
        self.product_PPM = tk.Label(self, text="Product and PPM", font=LARGE_FONT)
        self.product_PPM.grid(row=50, column=40)

        self.c2_product = tk.Label(self, text="Cell 2: Product")
        self.c2_product.grid(row=55, column=40)
        self.c2_var = StringVar()
        self.c2_ent = tk.Entry(self, textvariable=self.c2_var)
        self.c2_ent.grid(row=55, column=45)

        self.c2_ppm = tk.Label(self, text="Cell 2: PPM")
        self.c2_ppm.grid(row=60, column=40)
        self.c2PPM_var = StringVar()  # dependant on % oil
        self.c2PPM_ent = tk.Entry(self, textvariable=self.c2PPM_var)
        self.c2PPM_ent.grid(row=60, column=45)

        self.c3_product = tk.Label(self, text="Cell 3: Product")
        self.c3_product.grid(row=65, column=40)
        self.c3_var = StringVar()
        self.c3_ent = tk.Entry(self, textvariable=self.c3_var)
        self.c3_ent.grid(row=65, column=45)

        self.c3_ppm = tk.Label(self, text="Cell 3: PPM")
        self.c3_ppm.grid(row=70, column=40)
        self.c3PPM_var = StringVar()
        self.c3PPM_ent = tk.Entry(self, textvariable=self.c3PPM_var)
        self.c3PPM_ent.grid(row=70, column=45)

        # Third part of the page=============================================
        # ====================================================================
        # Cleaning process loss
        self.blank2 = tk.Label(self)  # Give a blank space
        self.blank2.grid(row=75, column=5)
        self.clean_title = tk.Label(self, text="Cleaning Process", font=LARGE_FONT)
        self.clean_title.grid(row=80, column=5)

        self.weight_start = tk.Label(self, text="Initial Weight")
        self.weight_start.grid(row=85, column=5)
        self.w_s_var = DoubleVar()
        self.w_s_ent = tk.Entry(self, textvariable=self.w_s_var)
        self.w_s_ent.grid(row=85, column=10)

        self.weight_end = tk.Label(self, text="Final Weight")
        self.weight_end.grid(row=85, column=40)
        self.w_e_var = DoubleVar()
        self.w_e_ent = tk.Entry(self, textvariable=self.w_e_var)
        self.w_e_ent.grid(row=85, column=45)

        self.weight_res = tk.Label(self, text="Difference")
        self.weight_res.grid(row=90, column=5)
        self.w_r_var = DoubleVar()
        self.w_r_ent = tk.Entry(self, textvariable=self.w_r_var, state='readonly')
        self.w_r_ent.grid(row=90, column=10)

        # Fourth part of the page=============================================
        # ====================================================================
        self.blank3 = tk.Label(self)  # Give a blank space
        self.blank3.grid(row=95, column=5)

        self.cell_title = tk.Label(self, text="Cell #", font="Helvetica 10 bold")
        self.cell_title.grid(row=100, column=5)

        self.product_title = tk.Label(self, text="Product", font="Helvetica 10 bold")
        self.product_title.grid(row=100, column=10)

        self.initial_title = tk.Label(self, text="Initial Weight", font="Helvetica 10 bold")
        self.initial_title.grid(row=100, column=40)

        self.final_title = tk.Label(self, text="Final Weight", font="Helvetica 10 bold")
        self.final_title.grid(row=100, column=45)

        self.c1_label = tk.Label(self, text="1")  # cell 1 number
        self.c1_label.grid(row=101, column=5, rowspan=4)
        self.c1_product = tk.Label(self, text="Blank")
        self.c1_product.grid(row=101, column=10, rowspan=4)

        self.c2_label = tk.Label(self, text="2")  # cell 2 number
        self.c2_label.grid(row=106, column=5, rowspan=4, sticky=NS)
        self.c2_l_var = StringVar()
        self.c2_l_product = tk.Entry(self, textvariable=self.c2_l_var, state='readonly')
        self.c2_l_product.grid(row=107, column=10)
        self.c2_ppm_var = DoubleVar()
        self.c2_l_ppm = tk.Entry(self, textvariable=self.c2_ppm_var, state='readonly')
        self.c2_l_ppm.grid(row=108, column=10)

        self.c3_label = tk.Label(self, text="3")  # cell 3 number
        self.c3_label.grid(row=111, column=5, rowspan=4, sticky=NS)
        self.c3_l_var = StringVar()
        self.c3_l_product = tk.Entry(self, textvariable=self.c3_l_var, state='readonly')
        self.c3_l_product.grid(row=112, column=10)
        self.c3_ppm_var = DoubleVar()
        self.c3_l_ppm = tk.Entry(self, textvariable=self.c3_ppm_var, state='readonly')
        self.c3_l_ppm.grid(row=113, column=10)

        # Initial Weight****************************************
        # CELL 1 ===============================================
        self.iw_1_var = DoubleVar()
        self.iw_1 = tk.Entry(self, textvariable=self.iw_1_var)
        self.iw_1.grid(row=101, column=40)
        # self.iw_1_var.set(56.2054) Un-comment if needed to test the code
        self.iw_2_var = DoubleVar()
        self.iw_2 = tk.Entry(self, textvariable=self.iw_2_var)
        self.iw_2.grid(row=102, column=40)
        # self.iw_2_var.set(55.4680)
        self.iw_3_var = DoubleVar()
        self.iw_3 = tk.Entry(self, textvariable=self.iw_3_var)
        self.iw_3.grid(row=103, column=40)
        # self.iw_3_var.set(55.3765)
        self.iw_4_var = DoubleVar()
        self.iw_4 = tk.Entry(self, textvariable=self.iw_4_var)
        self.iw_4.grid(row=104, column=40)
        # self.iw_4_var.set(55.7733)
        self.blank4 = tk.Label(self)  # Give a blank space
        self.blank4.grid(row=105, column=40)

        # CELL 2 ===============================================
        self.iw_21_var = DoubleVar()
        self.iw_21 = tk.Entry(self, textvariable=self.iw_21_var)
        self.iw_21.grid(row=106, column=40)
        # self.iw_21_var.set(56.1421)
        self.iw_22_var = DoubleVar()
        self.iw_22 = tk.Entry(self, textvariable=self.iw_22_var)
        self.iw_22.grid(row=107, column=40)
        # self.iw_22_var.set(54.9943)
        self.iw_23_var = DoubleVar()
        self.iw_23 = tk.Entry(self, textvariable=self.iw_23_var)
        self.iw_23.grid(row=108, column=40)
        # self.iw_23_var.set(55.3265)
        self.iw_24_var = DoubleVar()
        self.iw_24 = tk.Entry(self, textvariable=self.iw_24_var)
        self.iw_24.grid(row=109, column=40)
        # self.iw_24_var.set(55.3524)
        self.blank5 = tk.Label(self)  # Give a blank space
        self.blank5.grid(row=110, column=40)

        # CELL 3 ===============================================
        self.iw_31_var = DoubleVar()
        self.iw_31 = tk.Entry(self, textvariable=self.iw_31_var)
        self.iw_31.grid(row=111, column=40)
        # self.iw_31_var.set(55.3850)
        self.iw_32_var = DoubleVar()
        self.iw_32 = tk.Entry(self, textvariable=self.iw_32_var)
        self.iw_32.grid(row=112, column=40)
        # self.iw_32_var.set(55.1140)
        self.iw_33_var = DoubleVar()
        self.iw_33 = tk.Entry(self, textvariable=self.iw_33_var)
        self.iw_33.grid(row=113, column=40)
        # self.iw_33_var.set(55.7831)
        self.iw_34_var = DoubleVar()
        self.iw_34 = tk.Entry(self, textvariable=self.iw_34_var)
        self.iw_34.grid(row=114, column=40)
        # self.iw_34_var.set(55.3232)
        self.blank6 = tk.Label(self)  # Give a blank space
        self.blank6.grid(row=115, column=40)

        # Final Weight****************************************
        # CELL 1 ===============================================
        self.fw_1_var = DoubleVar()
        self.fw_1 = tk.Entry(self, textvariable=self.fw_1_var)
        self.fw_1.grid(row=101, column=45)
        # self.fw_1_var.set(56.0404)
        self.fw_2_var = DoubleVar()
        self.fw_2 = tk.Entry(self, textvariable=self.fw_2_var)
        self.fw_2.grid(row=102, column=45)
        # self.fw_2_var.set(54.9041)
        self.fw_3_var = DoubleVar()
        self.fw_3 = tk.Entry(self, textvariable=self.fw_3_var)
        self.fw_3.grid(row=103, column=45)
        # self.fw_3_var.set(55.2386)
        self.fw_4_var = DoubleVar()
        self.fw_4 = tk.Entry(self, textvariable=self.fw_4_var)
        self.fw_4.grid(row=104, column=45)
        # self.fw_4_var.set(55.2695)
        self.blankfw1 = tk.Label(self)  # Give a blank space
        self.blankfw1.grid(row=105, column=45)

        # CELL 2 ===============================================
        self.fw_21_var = DoubleVar()
        self.fw_21 = tk.Entry(self, textvariable=self.fw_21_var)
        self.fw_21.grid(row=106, column=45)
        # self.fw_21_var.set(56.1618)
        self.fw_22_var = DoubleVar()
        self.fw_22 = tk.Entry(self, textvariable=self.fw_22_var)
        self.fw_22.grid(row=107, column=45)
        # self.fw_22_var.set(55.4408)
        self.fw_23_var = DoubleVar()
        self.fw_23 = tk.Entry(self, textvariable=self.fw_23_var)
        self.fw_23.grid(row=108, column=45)
        # self.fw_23_var.set(55.3471)
        self.fw_24_var = DoubleVar()
        self.fw_24 = tk.Entry(self, textvariable=self.fw_24_var)
        self.fw_24.grid(row=109, column=45)
        # self.fw_24_var.set(55.7457)
        self.blankfw2 = tk.Label(self)  # Give a blank space
        self.blankfw2.grid(row=110, column=45)

        # CELL 3 ===============================================
        self.fw_31_var = DoubleVar()
        self.fw_31 = tk.Entry(self, textvariable=self.fw_31_var)
        self.fw_31.grid(row=111, column=45)
        # self.fw_31_var.set(55.3633)
        self.fw_32_var = DoubleVar()
        self.fw_32 = tk.Entry(self, textvariable=self.fw_32_var)
        self.fw_32.grid(row=112, column=45)
        # self.fw_32_var.set(55.0952)
        self.fw_33_var = DoubleVar()
        self.fw_33 = tk.Entry(self, textvariable=self.fw_33_var)
        self.fw_33.grid(row=113, column=45)
        # self.fw_33_var.set(55.7654)
        self.fw_34_var = DoubleVar()
        self.fw_34 = tk.Entry(self, textvariable=self.fw_34_var)
        self.fw_34.grid(row=114, column=45)
        # self.fw_34_var.set(55.3054)
        self.blankfw3 = tk.Label(self)  # Give a blank space
        self.blankfw3.grid(row=115, column=45)

        def variables():  # function called when NEXT PAGE btn is pressed
            # Button is at the bottom after the function********
            tempC = (self.tempF_var.get() - 32) / 1.8  # converting from F to Celsius
            self.tempC_var.set(round(tempC, 2))

            pressT = self.press_var.get()
            # self.press_total_var.set(pressT)

            vel = self.rpm_var.get() * 0.166667 * 0.10472  # converting RPM to vel(ft/s)
            self.vel_var.set(round(vel, 2))

            # Water composition - 9 is the total but have to account for coupon holder displacement
            brineL = self.total_Liters_var.get() - (0.750 * 3)  # 0.75 is the displaced volume of coupon holder
            # 7.5L should be the starting point if 9 liters used
            self.cell_Liter_var.set(brineL / 3)

            oil_mL = (self.per_oil_var.get() / 100) * (brineL / 3)  # 10% of the mL/cell
            self.oil_L_var.set(oil_mL)

            # adding the products to the table ( product 1 and 2)
            c2_l_prod = self.c2_var.get()
            self.c2_l_var.set(c2_l_prod)
            c2_l_ppm = self.c2PPM_var.get()
            self.c2_ppm_var.set(c2_l_ppm + " PPM")

            c3_l_prod = self.c3_var.get()
            self.c3_l_var.set(c3_l_prod)
            c3_l_ppm = self.c3PPM_var.get()
            self.c3_ppm_var.set(c3_l_ppm + " PPM")

            # cleaning process loss
            diff_clean = self.w_s_var.get() - self.w_e_var.get()
            self.w_r_var.set(round(diff_clean, 4))

            # generating list containing the IW and FW
            # This "gets" values entered in input boxes and gathers them in a python list
            initial_c1 = [self.iw_1_var.get(), self.iw_2_var.get(), self.iw_3_var.get(), self.iw_4_var.get()]
            initial_c2 = [self.iw_21_var.get(), self.iw_22_var.get(), self.iw_23_var.get(), self.iw_24_var.get()]
            initial_c3 = [self.iw_31_var.get(), self.iw_32_var.get(), self.iw_33_var.get(), self.iw_34_var.get()]

            fin_c1 = [self.fw_1_var.get(), self.fw_2_var.get(), self.fw_3_var.get(), self.fw_4_var.get()]
            fin_c2 = [self.fw_21_var.get(), self.fw_22_var.get(), self.fw_23_var.get(), self.fw_24_var.get()]
            fin_c3 = [self.fw_31_var.get(), self.fw_32_var.get(), self.fw_33_var.get(), self.fw_34_var.get()]
            # need to add the values to a variable ** see below example**
            # self.press_total_var.set(initial_c1)
            self.initial_c1_var.set(initial_c1)
            self.initial_c2_var.set(initial_c2)
            self.initial_c3_var.set(initial_c3)

            self.fin_c1_var.set(fin_c1)
            self.fin_c2_var.set(fin_c2)
            self.fin_c3_var.set(fin_c3)
            # will need values outside of function... this will help us access them
            return initial_c1, initial_c2, initial_c3, fin_c1, fin_c2, fin_c3, diff_clean
            # END of function "variables"

# this will set the values (how to make button do 2 things?)
        self.next_btn = ttk.Button(self, text="Set Values", command=variables)
        # calling the function that contains the .get()
        self.next_btn.grid(row=40, column=40)

        # ++++++++++++++++++++++++ Setting "ghost" variables to store list of IW and FW from above
        self.initial_c1_var = DoubleVar()  # each one is for an entire cell since we use a list and can call
        # values using their location
        self.initial_c1_entry = tk.Entry(self, textvariable=self.initial_c1_var)
        self.initial_c2_var = DoubleVar()
        self.initial_c2_entry = tk.Entry(self, textvariable=self.initial_c2_var)
        self.initial_c3_var = DoubleVar()
        self.initial_c3_entry = tk.Entry(self, textvariable=self.initial_c3_var)

        self.fin_c1_var = DoubleVar()
        self.fin_c1_entry = tk.Entry(self, textvariable=self.fin_c1_var)
        self.fin_c2_var = DoubleVar()
        self.fin_c2_entry = tk.Entry(self, textvariable=self.fin_c2_var)
        self.fin_c3_var = DoubleVar()
        self.fin_c3_entry = tk.Entry(self, textvariable=self.fin_c3_var)
        # accessing variables outside function called "variables"
        self.initial_c1, self.initial_c2, self.initial_c3, self.fin_c1, self.fin_c2, \
            self.fin_c3, self.diff_clean = variables()
        # self.c1_test = self.initial_c1  # don't need...For right now
        # print(self.initial_c1)

# Button will generate an excel sheet with all of the data
        self.data_a = ttk.Button(self, text="Next", command=lambda: controller.show_frame(data1))
        self.data_a.grid(row=40, column=45)


class data1(tk.Frame):  # different page in tkinter

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.label = tk.Label(self, text="Weight Loss (g)", font=LARGE_FONT)
        self.label.grid(row=1, column=1)
        self.controller = controller
        # Buttons at the top
        self.back_btn = ttk.Button(self, text="Back", command=lambda:controller.show_frame(welcomePage))
        self.back_btn.grid(row=1, column=4)

        # ===================== CELL 1
        self.c1_label = ttk.Label(self, text="Cell 1", font=NORM_FONT)  # ***TITLE CELL 1***
        self.c1_label.grid(row=2, column=1, columnspan=2)

        self.c11_wl_label = tk.Label(self, text="C 1 WL")
        self.c11_wl_label.grid(row=3, column=1)
        self.c11_wl_var = DoubleVar()
        self.c11_wl = ttk.Entry(self, textvariable=self.c11_wl_var, state='readonly')
        self.c11_wl.grid(row=3, column=2)

        self.c12_wl_label = tk.Label(self, text="C 2 WL")
        self.c12_wl_label.grid(row=4, column=1)
        self.c12_wl_var = DoubleVar()
        self.c12_wl = ttk.Entry(self, textvariable=self.c12_wl_var, state='readonly')
        self.c12_wl.grid(row=4, column=2)

        self.c13_wl_label = tk.Label(self, text="C 3 WL")
        self.c13_wl_label.grid(row=5, column=1)
        self.c13_wl_var = DoubleVar()
        self.c13_wl = ttk.Entry(self, textvariable=self.c13_wl_var, state='readonly')
        self.c13_wl.grid(row=5, column=2)

        self.c14_wl_label = tk.Label(self, text="C 4 WL")
        self.c14_wl_label.grid(row=6, column=1)
        self.c14_wl_var = DoubleVar()
        self.c14_wl = ttk.Entry(self, textvariable=self.c14_wl_var, state='readonly')
        self.c14_wl.grid(row=6, column=2)

        # ===================== CELL 2
        self.c2_label = ttk.Label(self, text="Cell 2", font=NORM_FONT)  # ***TITLE CELL 1***
        self.c2_label.grid(row=2, column=3, columnspan=2)

        self.c21_wl_label = tk.Label(self, text="C 1 WL")
        self.c21_wl_label.grid(row=3, column=3)
        self.c21_wl_var = DoubleVar()
        self.c21_wl = ttk.Entry(self, textvariable=self.c21_wl_var, state='readonly')
        self.c21_wl.grid(row=3, column=4)

        self.c22_wl_label = tk.Label(self, text="C 2 WL")
        self.c22_wl_label.grid(row=4, column=3)
        self.c22_wl_var = DoubleVar()
        self.c22_wl = ttk.Entry(self, textvariable=self.c22_wl_var, state='readonly')
        self.c22_wl.grid(row=4, column=4)

        self.c23_wl_label = tk.Label(self, text="C 3 WL")
        self.c23_wl_label.grid(row=5, column=3)
        self.c23_wl_var = DoubleVar()
        self.c23_wl = ttk.Entry(self, textvariable=self.c23_wl_var, state='readonly')
        self.c23_wl.grid(row=5, column=4)

        self.c24_wl_label = tk.Label(self, text="C 4 WL")
        self.c24_wl_label.grid(row=6, column=3)
        self.c24_wl_var = DoubleVar()
        self.c24_wl = ttk.Entry(self, textvariable=self.c24_wl_var, state='readonly')
        self.c24_wl.grid(row=6, column=4)

        # ===================== CELL 3
        self.c2_label = ttk.Label(self, text="Cell 3", font=NORM_FONT)  # ***TITLE CELL 1***
        self.c2_label.grid(row=2, column=5, columnspan=2)

        self.c31_wl_label = tk.Label(self, text="C 1 WL")
        self.c31_wl_label.grid(row=3, column=5)
        self.c31_wl_var = DoubleVar()
        self.c31_wl = ttk.Entry(self, textvariable=self.c31_wl_var, state='readonly')
        self.c31_wl.grid(row=3, column=6)

        self.c32_wl_label = tk.Label(self, text="C 2 WL")
        self.c32_wl_label.grid(row=4, column=5)
        self.c32_wl_var = DoubleVar()
        self.c32_wl = ttk.Entry(self, textvariable=self.c32_wl_var, state='readonly')
        self.c32_wl.grid(row=4, column=6)

        self.c33_wl_label = tk.Label(self, text="C 3 WL")
        self.c33_wl_label.grid(row=5, column=5)
        self.c33_wl_var = DoubleVar()
        self.c33_wl = ttk.Entry(self, textvariable=self.c33_wl_var, state='readonly')
        self.c33_wl.grid(row=5, column=6)

        self.c34_wl_label = tk.Label(self, text="C 4 WL")
        self.c34_wl_label.grid(row=6, column=5)
        self.c34_wl_var = DoubleVar()
        self.c34_wl = ttk.Entry(self, textvariable=self.c34_wl_var, state='readonly')
        self.c34_wl.grid(row=6, column=6)

        # Averages
        self.c1_mean_label = tk.Label(self, text='Average WL', font=NORM_FONT)
        self.c1_mean_label.grid(row=7, column=1)
        self.c1_mean_var = DoubleVar()
        self.c1_mean_ent = ttk.Entry(self, textvariable=self.c1_mean_var, state='readonly')
        self.c1_mean_ent.grid(row=7, column=2)

        self.c2_mean_label = tk.Label(self, text='Average WL', font=NORM_FONT)
        self.c2_mean_label.grid(row=7, column=3)
        self.c2_mean_var = DoubleVar()
        self.c2_mean_ent = ttk.Entry(self, textvariable=self.c2_mean_var, state='readonly')
        self.c2_mean_ent.grid(row=7, column=4)

        self.c3_mean_label = tk.Label(self, text='Average WL', font=NORM_FONT)
        self.c3_mean_label.grid(row=7, column=5)
        self.c3_mean_var = DoubleVar()
        self.c3_mean_ent = ttk.Entry(self, textvariable=self.c3_mean_var, state='readonly')
        self.c3_mean_ent.grid(row=7, column=6)

        # standard deviation
        self.stdev_label_blank = tk.Label(self)
        self.stdev_label_blank.grid(row=8, column=1)
        self.stdev_label = tk.Label(self, text='Standard Deviation (Population SD)', font=LARGE_FONT)
        self.stdev_label.grid(row=9, column=1, columnspan=2)

        self.c1_stdev_label = tk.Label(self, text='Cell 1', font=NORM_FONT)
        self.c1_stdev_label.grid(row=10, column=1)
        self.c1_stdev_var = DoubleVar()
        self.c1_stdev_entry = ttk.Entry(self, textvariable=self.c1_stdev_var, state='readonly')
        self.c1_stdev_entry.grid(row=10, column=2)

        self.c2_stdev_label = tk.Label(self, text='Cell 2', font=NORM_FONT)
        self.c2_stdev_label.grid(row=10, column=3)
        self.c2_stdev_var = DoubleVar()
        self.c2_stdev_entry = ttk.Entry(self, textvariable=self.c2_stdev_var, state='readonly')
        self.c2_stdev_entry.grid(row=10, column=4)

        self.c3_stdev_label = tk.Label(self, text='Cell 3', font=NORM_FONT)
        self.c3_stdev_label.grid(row=10, column=5)
        self.c3_stdev_var = DoubleVar()
        self.c3_stdev_entry = ttk.Entry(self, textvariable=self.c3_stdev_var, state='readonly')
        self.c3_stdev_entry.grid(row=10, column=6)

        # mpy using...mpy = (22,300 * WL)/(density(g/cm^3)*area(in^2)*time(days))
        self.mpy_label_blank = tk.Label(self)
        self.mpy_label_blank.grid(row=11, column=1)
        self.mpy_label = tk.Label(self, text='MPYs', font=LARGE_FONT)
        self.mpy_label.grid(row=12, column=1)

        # ================== cell 1 --- MPYs
        self.c1_mpy_label = tk.Label(self, text='Cell 1', font=NORM_FONT)
        self.c1_mpy_label.grid(row=13, column=1, columnspan=2)

        self.c11_mpy_label = tk.Label(self, text='1 MPY')
        self.c11_mpy_label.grid(row=14, column=1)
        self.c11_mpy_var = DoubleVar()
        self.c11_mpy = ttk.Entry(self, textvariable=self.c11_mpy_var, state='readonly')
        self.c11_mpy.grid(row=14, column=2)

        self.c12_mpy_label = tk.Label(self, text='2 MPY')
        self.c12_mpy_label.grid(row=15, column=1)
        self.c12_mpy_var = DoubleVar()
        self.c12_mpy = ttk.Entry(self, textvariable=self.c12_mpy_var, state='readonly')
        self.c12_mpy.grid(row=15, column=2)

        self.c13_mpy_label = tk.Label(self, text='3 MPY')
        self.c13_mpy_label.grid(row=16, column=1)
        self.c13_mpy_var = DoubleVar()
        self.c13_mpy = ttk.Entry(self, textvariable=self.c13_mpy_var, state='readonly')
        self.c13_mpy.grid(row=16, column=2)

        self.c14_mpy_label = tk.Label(self, text='4 MPY')
        self.c14_mpy_label.grid(row=17, column=1)
        self.c14_mpy_var = DoubleVar()
        self.c14_mpy = ttk.Entry(self, textvariable=self.c14_mpy_var, state='readonly')
        self.c14_mpy.grid(row=17, column=2)

        # ================== cell 2 --- MPYs
        self.c2_mpy_label = tk.Label(self, text='Cell 2', font=NORM_FONT)
        self.c2_mpy_label.grid(row=13, column=3, columnspan=2)

        self.c21_mpy_label = tk.Label(self, text='1 MPY')
        self.c21_mpy_label.grid(row=14, column=3)
        self.c21_mpy_var = DoubleVar()
        self.c21_mpy = ttk.Entry(self, textvariable=self.c21_mpy_var, state='readonly')
        self.c21_mpy.grid(row=14, column=4)

        self.c22_mpy_label = tk.Label(self, text='2 MPY')
        self.c22_mpy_label.grid(row=15, column=3)
        self.c22_mpy_var = DoubleVar()
        self.c22_mpy = ttk.Entry(self, textvariable=self.c22_mpy_var, state='readonly')
        self.c22_mpy.grid(row=15, column=4)

        self.c23_mpy_label = tk.Label(self, text='3 MPY')
        self.c23_mpy_label.grid(row=16, column=3)
        self.c23_mpy_var = DoubleVar()
        self.c23_mpy = ttk.Entry(self, textvariable=self.c23_mpy_var, state='readonly')
        self.c23_mpy.grid(row=16, column=4)

        self.c24_mpy_label = tk.Label(self, text='4 MPY')
        self.c24_mpy_label.grid(row=17, column=3)
        self.c24_mpy_var = DoubleVar()
        self.c24_mpy = ttk.Entry(self, textvariable=self.c24_mpy_var, state='readonly')
        self.c24_mpy.grid(row=17, column=4)

        # ================== cell 3 --- MPYs
        self.c3_mpy_label = tk.Label(self, text='Cell 3', font=NORM_FONT)
        self.c3_mpy_label.grid(row=13, column=5, columnspan=2)

        self.c31_mpy_label = tk.Label(self, text='1 MPY')
        self.c31_mpy_label.grid(row=14, column=5)
        self.c31_mpy_var = DoubleVar()
        self.c31_mpy = ttk.Entry(self, textvariable=self.c31_mpy_var, state='readonly')
        self.c31_mpy.grid(row=14, column=6)

        self.c32_mpy_label = tk.Label(self, text='2 MPY')
        self.c32_mpy_label.grid(row=15, column=5)
        self.c32_mpy_var = DoubleVar()
        self.c32_mpy = ttk.Entry(self, textvariable=self.c32_mpy_var, state='readonly')
        self.c32_mpy.grid(row=15, column=6)

        self.c33_mpy_label = tk.Label(self, text='3 MPY')
        self.c33_mpy_label.grid(row=16, column=5)
        self.c33_mpy_var = DoubleVar()
        self.c33_mpy = ttk.Entry(self, textvariable=self.c33_mpy_var, state='readonly')
        self.c33_mpy.grid(row=16, column=6)

        self.c34_mpy_label = tk.Label(self, text='4 MPY')
        self.c34_mpy_label.grid(row=17, column=5)
        self.c34_mpy_var = DoubleVar()
        self.c34_mpy = ttk.Entry(self, textvariable=self.c34_mpy_var, state='readonly')
        self.c34_mpy.grid(row=17, column=6)

        # averages MPYs
        self.c1_mean_label_mpy = tk.Label(self, text='Avg MPY', font=NORM_FONT)
        self.c1_mean_label_mpy.grid(row=18, column=1)
        self.c1_mean_var_mpy = DoubleVar()
        self.c1_mean_ent_mpy = ttk.Entry(self, textvariable=self.c1_mean_var_mpy, state='readonly')
        self.c1_mean_ent_mpy.grid(row=18, column=2)

        self.c2_mean_label_mpy = tk.Label(self, text='Avg MPY', font=NORM_FONT)
        self.c2_mean_label_mpy.grid(row=18, column=3)
        self.c2_mean_var_mpy = DoubleVar()
        self.c2_mean_ent_mpy = ttk.Entry(self, textvariable=self.c2_mean_var_mpy, state='readonly')
        self.c2_mean_ent_mpy.grid(row=18, column=4)

        self.c3_mean_label_mpy = tk.Label(self, text='Avg MPY', font=NORM_FONT)
        self.c3_mean_label_mpy.grid(row=18, column=5)
        self.c3_mean_var_mpy = DoubleVar()
        self.c3_mean_ent_mpy = ttk.Entry(self, textvariable=self.c3_mean_var_mpy, state='readonly')
        self.c3_mean_ent_mpy.grid(row=18, column=6)

        def data_results():  # Function that gets variables form other class / page in tkinter
            # This is how to get a variable from another class!!!
            test = self.controller.get_page("welcomePage")  # name of the page where value comes from
            diff = float(test.w_r_ent.get())  # Cleaning process loss (had to change from str to float)

            # Here is where the variables from function "variables" are accessed... ***see initial_c1*** below
            c1_list = [float(i) for i in test.initial_c1_entry.get().split()]  # creating list separated by comma
            c1_list_sub = list(np.asarray(c1_list) + diff)
            c1_list_fin = [float(ii) for ii in test.fin_c1_entry.get().split()]
            diff_cell_1 = np.subtract(c1_list_sub, c1_list_fin)  # subtracting the two list
            self.c11_wl_var.set(round(diff_cell_1[0], 4))  # setting the first value of the list
            self.c12_wl_var.set(round(diff_cell_1[1], 4))
            self.c13_wl_var.set(round(diff_cell_1[2], 4))
            self.c14_wl_var.set(round(diff_cell_1[3], 4))
            average_c1 = [float(iii) for iii in diff_cell_1]  # can use this for the standard deviation also
            self.c1_mean_var.set(round(np.average(average_c1), 4))

            c2_list = [float(a) for a in test.initial_c2_entry.get().split()]
            c2_list_sub = list(np.asarray(c2_list) + diff)
            c2_list_fin = [float(aa) for aa in test.fin_c2_entry.get().split()]
            diff_cell_2 = np.subtract(c2_list_sub, c2_list_fin)
            self.c21_wl_var.set(round(diff_cell_2[0], 4))
            self.c22_wl_var.set(round(diff_cell_2[1], 4))
            self.c23_wl_var.set(round(diff_cell_2[2], 4))
            self.c24_wl_var.set(round(diff_cell_2[3], 4))
            average_c2 = [float(aaa) for aaa in diff_cell_2]  # can use this for the standard deviation also
            self.c2_mean_var.set(round(np.average(average_c2), 4))

            c3_list = [float(b) for b in test.initial_c3_entry.get().split()]
            c3_list_sub = list(np.asarray(c3_list) + diff)
            c3_list_fin = [float(bb) for bb in test.fin_c3_entry.get().split()]
            diff_cell_3 = np.subtract(c3_list_sub, c3_list_fin)
            self.c31_wl_var.set(round(diff_cell_3[0], 4))
            self.c32_wl_var.set(round(diff_cell_3[1], 4))
            self.c33_wl_var.set(round(diff_cell_3[2], 4))
            self.c34_wl_var.set(round(diff_cell_3[3], 4))
            average_c3 = [float(bbb) for bbb in diff_cell_3]  # can use this for the standard deviation also
            self.c3_mean_var.set(round(np.average(average_c3), 4))

            # Population Standard Deviation Calculation
            c1_std_pop = np.std(average_c1)
            self.c1_stdev_var.set(round(c1_std_pop, 4))
            c2_std_pop = np.std(average_c2)
            self.c2_stdev_var.set(round(c2_std_pop, 4))
            c3_std_pop = np.std(average_c3)
            self.c3_stdev_var.set(round(c3_std_pop, 4))

            # MPYs for each coupons using a for loop --- CELL 1
            mpy_c1_list = []  # empty list ready for values to be added
            for x1 in diff_cell_1:
                mpy_c1 = (22300 * x1) / \
                         (float(test.density_ent.get()) * float(test.area_ent.get()) \
                          * float(test.duration_ent.get()) * 0.0416667)
                mpy_c1_list.append(mpy_c1)  # adding the values to a list

            # printing mpy's (two decimal points)
            self.c11_mpy_var.set(round(mpy_c1_list[0], 2))
            self.c12_mpy_var.set(round(mpy_c1_list[1], 2))
            self.c13_mpy_var.set(round(mpy_c1_list[2], 2))
            self.c14_mpy_var.set(round(mpy_c1_list[3], 2))

            # MPYs for each coupons using a for loop --- CELL 2
            mpy_c2_list = []  # empty list
            for x2 in diff_cell_2:
                mpy_c2 = (22300 * x2) / \
                         (float(test.density_ent.get()) * float(test.area_ent.get()) \
                          * float(test.duration_ent.get()) * 0.0416667)
                mpy_c2_list.append(mpy_c2)  # adding the values to a list

            # printing mpy's (two decimal points)
            self.c21_mpy_var.set(round(mpy_c2_list[0], 2))
            self.c22_mpy_var.set(round(mpy_c2_list[1], 2))
            self.c23_mpy_var.set(round(mpy_c2_list[2], 2))
            self.c24_mpy_var.set(round(mpy_c2_list[3], 2))

            # MPYs for each coupons using a for loop --- CELL 3
            mpy_c3_list = []  # empty list
            for x3 in diff_cell_3:
                mpy_c3 = (22300 * x3) / \
                         (float(test.density_ent.get()) * float(test.area_ent.get()) \
                          * float(test.duration_ent.get()) * 0.0416667)
                mpy_c3_list.append(mpy_c3)  # adding the values to a list

            # printing mpy's (two decimal points)
            self.c31_mpy_var.set(round(mpy_c3_list[0], 2))
            self.c32_mpy_var.set(round(mpy_c3_list[1], 2))
            self.c33_mpy_var.set(round(mpy_c3_list[2], 2))
            self.c34_mpy_var.set(round(mpy_c3_list[3], 2))

            # Calculating Average MPY's
            avg_c1_mpy = [float(i_c1) for i_c1 in mpy_c1_list]
            self.c1_mean_var_mpy.set(round(np.average(avg_c1_mpy), 2))
            avg_c2_mpy = [float(i_c2) for i_c2 in mpy_c2_list]
            self.c2_mean_var_mpy.set(round(np.average(avg_c2_mpy), 2))
            avg_c3_mpy = [float(i_c3) for i_c3 in mpy_c3_list]
            self.c3_mean_var_mpy.set(round(np.average(avg_c3_mpy), 2))

            self.company_name = test.name_var.get()

        # Button for the function  "data_results"
        self.show_data = ttk.Button(self, text="Show Data", command=data_results)  # call function
        self.show_data.grid(row=1, column=3)

        # export to excel button
        # self.imp_excel = ttk.Button(self, text='import', command=excel_imp)
        # self.imp_excel.grid(row=1, column=5)



app = SeaofMPYapp()
app.geometry("720x820")  # window size
app.mainloop()

